目的：
    项目中各个类是紧耦合，并且类的具体实现面临着经常性的变化，但是类的接口相对稳定；因为是紧耦合，某个类改变的时候可能会导致别的地方的改动，若是经常进行改动，那么对于编码是个灾难。
    在工厂模式的基础上，又增加了一类产品，它也存在着抽象类和具体的产品类，那么我们为了新的产品在引入另一套工厂类显然是不合适的，这时我们需要研究两类产品（可能还多）的对应关系，因此出现了抽象工厂模式。
    可以说，抽象工厂模式和工厂方法模式的区别就在于需要创建对象的复杂程度上。而且抽象工厂模式是三个里面最为抽象、最具一般性的。
    "多系列具体对象创建工作"的紧耦合

方案：
    为了解决各个类的紧耦合的关系，在应对变化时改动减少，封装new方法是一种选择
    封装变化点-----哪里变化，封装哪里
    提供一种"封装机制"来避免客户程序和这种"多系列具体对象创建工作"的紧耦合

抽象工厂：
    多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。
    一个抽象工厂类，可以派生出多个具体工厂类（根据产品类进行组合）。
    每个具体工厂类可以创建具有多个具体产品类(多种产品搭配)的实例。

    补：工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。
        工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。
        抽象可以使用抽象类或者接口来进行抽象。

    产品1（车）的抽象类和具体类：
    public abstract class BaseCar
    {
        public abstract string GetCar();
    }
    public class JeepCar : BaseCar
    {
        public override string GetCar()
        {
            return "吉普车";
        }
    }
    public class SportCar : BaseCar
    {
        public override string GetCar()
        {
            return "跑车";
        }
    }
    产品2（坐垫）的抽象类和具体类：
    public abstract class BaseCushion
    {
        public abstract string GetCushionType();
    }
    public class BambooCushion : BaseCushion
    {
        public override string GetCushionType()
        {
            return "竹垫";
        }
    }
    public class LeatherCushion : BaseCushion
    {
        public override string GetCushionType()
        {
            return "皮垫";
        }
    }
    抽象工厂类及具体工厂类：
    public abstract class AbstractFactory
    {
        public abstract BaseCar CreateCar();
        public abstract BaseCushion CreateCushion();
    }

    public class Factory1 : AbstractFactory
    {
        public override BaseCar CreateCar()
        {
            return new JeepCar();
        }
        public override BaseCushion CreateCushion()
        {
            return new LeatherCushion();
        }
    }
    Factory1工厂类返回的是吉普车和皮垫，这里还可以自己在定义另外3个具体工厂类（两种车与两种坐标的组合）。

    使用：
        static void Main(string[] args)
        {
            AbstractFactory factory = new Factory1();
            BaseCar car = factory.CreateCar();
            BaseCushion cushion = factory.CreateCushion();

            Console.WriteLine("坐垫是{0}的{1}！", cushion.GetCushionType(), car.GetCar());

            Console.WriteLine("-----------end-----------");
            Console.ReadKey();
        }
    使用不同的工厂类就可以返回不同的类型的车与坐垫！可能会有迷惑，可以这么理解，上述的两个产品（车与坐垫）相互作用产生了一种新的产品（带坐垫的车，这个新产品也可以进行封装），新产品的抽象类则是有2个，并且抽象类的具体类分别是2与2，对应的具体工厂则是4个（两类产品的搭配），每种带坐垫的车由相应的工厂来生产，这就很像工厂模式


总结：
    如果不存在”多系列对象创建“的需求变化，则没必要应用Abstract Factory模式，静态工厂方法足矣。
    "系列对象"指的是这些对象之间有相互依赖、或作用的关系。比如上述吉普车可以是皮垫或者竹垫。
    我们可以将上述实例化工厂时，将类名配置在配置文件中，使用反射机制来进行实例化，当然产品类也可以如此处理。
    Abstract Factory模式主要在于应对"新系列"的需求变动。其缺点在于难以应对”新对象“的需求变动。
    Abstract Factory模式经常和Factory Method模式共同组合来应对“对象创建”的需求变化。
