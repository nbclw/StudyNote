目的：
    某一类的实例因为特殊情况（包含某种有限珍贵的资源、实例化费时费劲并可重复利用）只需要实例化（构造）一次即可
    这应该是类设计者的责任，而不是类使用者的责任。

方案：
    将该类的实例放入一个静态变量中

方法一（懒汉模式）：
    步骤1：构造函数私有化，定义一个私有的静态成员变量
    public class SingleClass
    {
        private static SingleClass _single = null;
        private SingleClass()
        {

        }
    }
    步骤2：公布一个静态创建的方法或者属性
    public class SingleClass
    {
        private static SingleClass _single = null;
        private SingleClass()
        {
            
        }

        public static SingleClass Create()
        {
            if (_single == null)
            {
                _single = new SingleClass();
            }
            return _single;
        }
    }
    上述步骤在单线程里面可以正常运行，但是在多线程的过程中会有线程安全的问题：重复创建或者更多无法意料的问题
    步骤3：双if加lock（锁），存放唯一实例的静态字段加入volatile关键字，并且增加一个只读的静态锁实例，
    补1：并且推荐使用lock(readonly static object _single_lock)，加锁是锁的_single_lock的实例引用，若使用别的容易容易锁错误
    补2：volatile保证严格意义的多线程编译器在代码编译时对指令不进行微调，使的线程安全
    public class SingleClass
    {
        private static volatile SingleClass _single = null;
        private readonly static object _single_lock = new object();
        private SingleClass()
        {
            
        }

        public static SingleClass Create()
        {
            if (_single == null)
            {
                lock (_single_lock)
                {
                    if (_single == null)
                    {
                        _single = new SingleClass();
                    }
                }
            }
            return _single;
        }
    }

    总结：上述方式的实现，不仅是线程（多线程、单线程）安全的，保证代码中只存在一个实例，还因为是在使用Create的时候才会对其进行创建实例，因而这种实现还有一个标签叫懒汉模式，在大多数应用场景推荐使用方式一。

方法二（饿汉模式）：
    此方式有还可以存在两种方式，但是原理都是一样的，都是运用了CLR来进行自动创建，当使用存在静态成员变量或者静态构造方法的类时，CLR都会先去执行，可以在声明唯一静态实例时创建，或者在静态构造方法中创建，事实上，下面第一个展开就是第二个（第二个再加上一个私有的构造方法时，二者完全一样）
    当然，构造函数都必须私有
    public class SingleClass
    {
        private static readonly SingleClass _single = new SingleClass();
        private SingleClass()
        {
            
        }
    }
    public class SingleClass
    {
        private static readonly SingleClass _single = null;
        static SingleClass()
        {
            _single = new SingleClass();
        }
    }
    总结：饿汉模式的特点是在使用（无论怎么使用）该类时就会实例化出该唯一实例，所以无需公布出一个方法或者属性来创建，也不会存在线程安全的问题，这是CLR绝对保证的



