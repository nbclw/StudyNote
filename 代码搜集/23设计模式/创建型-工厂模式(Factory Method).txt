意图：
    定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。
    项目中各个类是紧耦合，并且类的具体实现面临着经常性的变化，但是类的接口相对稳定；因为是紧耦合，某个类改变的时候可能会导致别的地方的改动，若是经常进行改动，那么对于编码是个灾难。

主要解决：
    主要解决接口选择的问题。
    为了解决各个类的紧耦合的关系，在应对变化时改动减少，封装new方法是一种选择。

何时使用：
    我们明确地计划不同条件下创建不同实例时。

如何解决：
    让其子类实现工厂接口，返回的也是一个抽象的产品。

关键代码：
    创建过程在其子类执行。

优点： 
    1、一个调用者想创建一个对象，只要知道其名称就可以了。
    2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。
    3、屏蔽产品的具体实现，调用者只关心产品的接口。 
缺点：
    每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。

工厂模式：
    定义一个用户创建对象的接口，让子类决定实例哪一个类。Factory Method使一个类的实例化延迟到子类。

    一个抽象产品类，可以派生出多个具体产品类。
    一个抽象工厂类，可以派生出多个具体工厂类。 
    每个具体工厂类只能创建具有一个具体产品类的实例。

    补：工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。
        工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。
        抽象可以使用抽象类或者接口来进行抽象。
    抽象产品类和具体产品类：
    public abstract class BaseCar//抽象类
    {
        public abstract void GetCar();
    }
    public class SportCar : BaseCar//具体类
    {
        public override void GetCar()
        {
            Console.WriteLine("这是一辆跑车！");
        }
    }
    public class JeepCar : BaseCar//具体类
    {
        public override void GetCar()
        {
            Console.WriteLine("这是一辆吉普车！");
        }
    }
    抽象工厂类和具体工厂类：
    public abstract class BaseCarFactory//抽象类
    {
        public abstract BaseCar Create();
    }
    public class SportCarFactory : BaseCarFactory//具体类
    {
        public override BaseCar Create()
        {
            return new SportCar();
        }
    }    public class JeepCarFactory : BaseCarFactory//具体类
    {
        public override BaseCar Create()
        {
            return new JeepCar();
        }
    }
    使用：
        static void Main(string[] args)
        {
            BaseCarFactory carFactory = new SportCarFactory();
            BaseCar car1 = carFactory.Create();
            car1.GetCar();

            carFactory = new JeepCarFactory();
            BaseCar car2 = carFactory.Create();
            car2.GetCar();

            Console.WriteLine("-----------end-----------");
            Console.ReadKey();
        }
    这里不同的具体工厂只能生产一种产品，不同的产品由不同的工厂来进行生产，抽象类（核心类）仅仅来定义生产方法，具体细节实现由具体工厂类来做，


    变种：简单工厂模式
    简单工厂模式也称为静态工厂方法模式，是工厂模式（多态性工厂模式）一种最简单的实现！在简单工厂模式中核心类不在抽象，也不存在具体工厂类，其生产方法全部有核心工厂类来静态实现。
    核心工厂类：
    public class CarFactory
    {
        public static SportCar CreateSport()
        {
            return new SportCar();
        }
        public static JeepCar CreateJeep()
        {
            return new JeepCar();
        }
    }
    使用：
        static void Main(string[] args)
        {
            SportCar car1 = CarFactory.CreateSport();
            car1.GetCar();

            JeepCar car2 = CarFactory.CreateJeep();
            car2.GetCar();

            Console.WriteLine("-----------end-----------");
            Console.ReadKey();
        }


总结：
    简单工厂模式结构简单，职责明确，能够根据外界的需求返回需要的结果，有利于软件的结构化优化，但是工厂类集中了所有的实例方法，容易违反GRASPR的高内聚的责任分配原则；在工厂模式中利用继承的特性，将核心工厂类与核心产品类抽象（抽象类或者接口类），这时调用者不在关心工厂类的实现细节与产品的细节，只要接口保持不变，系统上层就不会变化，解耦系统。
    使用工厂模式场景一般都是在：客户程序使用的对象存在变动的可能，或者根本就不知道使用哪一个具体的对象。那么我们可以将上述实例化工厂时，将类名配置在配置文件中，使用反射机制来进行实例化，当然产品类也可以如此处理。